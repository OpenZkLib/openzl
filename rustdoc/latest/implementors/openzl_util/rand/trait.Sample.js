(function() {var implementors = {
"openzl":[],
"openzl_crypto":[["impl&lt;S, G, GEN, M, D&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt; for <a class=\"struct\" href=\"openzl_crypto/algebra/diffie_hellman/struct.DiffieHellman.html\" title=\"struct openzl_crypto::algebra::diffie_hellman::DiffieHellman\">DiffieHellman</a>&lt;S, G, GEN, M&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;GEN: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt;,</span>"],["impl&lt;E, C, D&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/convert/header/struct.Converter.html\" title=\"struct openzl_crypto::encryption::convert::header::Converter\">Converter</a>&lt;E, C&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt;,</span>"],["impl&lt;E, C, D&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/convert/key/struct.Converter.html\" title=\"struct openzl_crypto::encryption::convert::key::Converter\">Converter</a>&lt;E, C&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt;,</span>"],["impl&lt;E, C, D&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/convert/plaintext/struct.Converter.html\" title=\"struct openzl_crypto::encryption::convert::plaintext::Converter\">Converter</a>&lt;E, C&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt;,</span>"],["impl&lt;K, E, DESK, DR&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(DESK, DR)</a>&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/hybrid/struct.Randomness.html\" title=\"struct openzl_crypto::encryption::hybrid::Randomness\">Randomness</a>&lt;K, E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: <a class=\"trait\" href=\"openzl_crypto/key/agreement/trait.EphemeralSecretKeyType.html\" title=\"trait openzl_crypto::key::agreement::EphemeralSecretKeyType\">EphemeralSecretKeyType</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.RandomnessType.html\" title=\"trait openzl_crypto::encryption::RandomnessType\">RandomnessType</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::<a class=\"associatedtype\" href=\"openzl_crypto/key/agreement/trait.EphemeralSecretKeyType.html#associatedtype.EphemeralSecretKey\" title=\"type openzl_crypto::key::agreement::EphemeralSecretKeyType::EphemeralSecretKey\">EphemeralSecretKey</a>: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;DESK&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.RandomnessType.html#associatedtype.Randomness\" title=\"type openzl_crypto::encryption::RandomnessType::Randomness\">Randomness</a>: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;DR&gt;,</span>"],["impl&lt;K, E, DEPK, DC&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(DEPK, DC)</a>&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/hybrid/struct.Ciphertext.html\" title=\"struct openzl_crypto::encryption::hybrid::Ciphertext\">Ciphertext</a>&lt;K, E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: <a class=\"trait\" href=\"openzl_crypto/key/agreement/trait.EphemeralPublicKeyType.html\" title=\"trait openzl_crypto::key::agreement::EphemeralPublicKeyType\">EphemeralPublicKeyType</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.CiphertextType.html\" title=\"trait openzl_crypto::encryption::CiphertextType\">CiphertextType</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::<a class=\"associatedtype\" href=\"openzl_crypto/key/agreement/trait.EphemeralPublicKeyType.html#associatedtype.EphemeralPublicKey\" title=\"type openzl_crypto::key::agreement::EphemeralPublicKeyType::EphemeralPublicKey\">EphemeralPublicKey</a>: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;DEPK&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.CiphertextType.html#associatedtype.Ciphertext\" title=\"type openzl_crypto::encryption::CiphertextType::Ciphertext\">Ciphertext</a>: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;DC&gt;,</span>"],["impl&lt;K, E, DK, DE&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(DK, DE)</a>&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/hybrid/struct.Hybrid.html\" title=\"struct openzl_crypto::encryption::hybrid::Hybrid\">Hybrid</a>&lt;K, E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;DK&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;DE&gt;,</span>"],["impl&lt;E, H, P&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(H, P)</a>&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/struct.Message.html\" title=\"struct openzl_crypto::encryption::Message\">Message</a>&lt;E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.HeaderType.html\" title=\"trait openzl_crypto::encryption::HeaderType\">HeaderType</a> + <a class=\"trait\" href=\"openzl_crypto/encryption/trait.PlaintextType.html\" title=\"trait openzl_crypto::encryption::PlaintextType\">PlaintextType</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.HeaderType.html#associatedtype.Header\" title=\"type openzl_crypto::encryption::HeaderType::Header\">Header</a>: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;H&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.PlaintextType.html#associatedtype.Plaintext\" title=\"type openzl_crypto::encryption::PlaintextType::Plaintext\">Plaintext</a>: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;P&gt;,</span>"],["impl&lt;E, H, C&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(H, C)</a>&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/struct.EncryptedMessage.html\" title=\"struct openzl_crypto::encryption::EncryptedMessage\">EncryptedMessage</a>&lt;E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.CiphertextType.html\" title=\"trait openzl_crypto::encryption::CiphertextType\">CiphertextType</a> + <a class=\"trait\" href=\"openzl_crypto/encryption/trait.HeaderType.html\" title=\"trait openzl_crypto::encryption::HeaderType\">HeaderType</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.HeaderType.html#associatedtype.Header\" title=\"type openzl_crypto::encryption::HeaderType::Header\">Header</a>: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;H&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.CiphertextType.html#associatedtype.Ciphertext\" title=\"type openzl_crypto::encryption::CiphertextType::Ciphertext\">Ciphertext</a>: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;C&gt;,</span>"],["impl&lt;P, C, DP, DC&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(DP, DC)</a>&gt; for <a class=\"struct\" href=\"openzl_crypto/permutation/duplex/struct.Duplexer.html\" title=\"struct openzl_crypto::permutation::duplex::Duplexer\">Duplexer</a>&lt;P, C&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: <a class=\"trait\" href=\"openzl_crypto/permutation/trait.PseudorandomPermutation.html\" title=\"trait openzl_crypto::permutation::PseudorandomPermutation\">PseudorandomPermutation</a> + <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;DP&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;DC&gt; + <a class=\"trait\" href=\"openzl_crypto/permutation/duplex/trait.Types.html\" title=\"trait openzl_crypto::permutation::duplex::Types\">Types</a>&lt;P&gt;,</span>"],["impl&lt;S, C, D&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt; for <a class=\"struct\" href=\"openzl_crypto/signature/convert/struct.Converter.html\" title=\"struct openzl_crypto::signature::convert::Converter\">Converter</a>&lt;S, C&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt;,</span>"],["impl&lt;H, DG, DH&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(DH, DG)</a>&gt; for <a class=\"struct\" href=\"openzl_crypto/signature/schnorr/struct.Schnorr.html\" title=\"struct openzl_crypto::signature::schnorr::Schnorr\">Schnorr</a>&lt;H&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: <a class=\"trait\" href=\"openzl_crypto/signature/schnorr/trait.HashFunction.html\" title=\"trait openzl_crypto::signature::schnorr::HashFunction\">HashFunction</a> + <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;DH&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;H::<a class=\"associatedtype\" href=\"openzl_crypto/signature/schnorr/trait.HashFunction.html#associatedtype.Group\" title=\"type openzl_crypto::signature::schnorr::HashFunction::Group\">Group</a>: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;DG&gt;,</span>"],["impl&lt;C&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_crypto/merkle_tree/test/struct.HashParameterDistribution.html\" title=\"struct openzl_crypto::merkle_tree::test::HashParameterDistribution\">HashParameterDistribution</a>&lt;C&gt;&gt; for <a class=\"struct\" href=\"openzl_crypto/merkle_tree/tree/struct.Parameters.html\" title=\"struct openzl_crypto::merkle_tree::tree::Parameters\">Parameters</a>&lt;C&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: <a class=\"trait\" href=\"openzl_crypto/merkle_tree/test/trait.HashParameterSampling.html\" title=\"trait openzl_crypto::merkle_tree::test::HashParameterSampling\">HashParameterSampling</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span>"],["impl&lt;const N:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, S, D&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt; for <a class=\"struct\" href=\"openzl_crypto/poseidon/encryption/struct.FixedEncryption.html\" title=\"struct openzl_crypto::poseidon::encryption::FixedEncryption\">FixedEncryption</a>&lt;N, S&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.Specification.html\" title=\"trait openzl_crypto::poseidon::Specification\">Specification</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"struct\" href=\"openzl_crypto/poseidon/struct.State.html\" title=\"struct openzl_crypto::poseidon::State\">State</a>&lt;S&gt;: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt;,</span>"],["impl&lt;D, S, T, const ARITY:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, COM&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt; for <a class=\"struct\" href=\"openzl_crypto/poseidon/hash/struct.Hasher.html\" title=\"struct openzl_crypto::poseidon::hash::Hasher\">Hasher</a>&lt;S, T, ARITY, COM&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.Specification.html\" title=\"trait openzl_crypto::poseidon::Specification\">Specification</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"struct\" href=\"openzl_crypto/poseidon/struct.Permutation.html\" title=\"struct openzl_crypto::poseidon::Permutation\">Permutation</a>&lt;S, COM&gt;: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"associatedtype\" href=\"openzl_crypto/poseidon/trait.ParameterFieldType.html#associatedtype.ParameterField\" title=\"type openzl_crypto::poseidon::ParameterFieldType::ParameterField\">ParameterField</a>: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.NativeField.html\" title=\"trait openzl_crypto::poseidon::NativeField\">NativeField</a> + <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.FieldGeneration.html\" title=\"trait openzl_crypto::poseidon::FieldGeneration\">FieldGeneration</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"openzl_crypto/poseidon/hash/trait.DomainTag.html\" title=\"trait openzl_crypto::poseidon::hash::DomainTag\">DomainTag</a>&lt;S&gt;,</span>"],["impl&lt;S, D&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt; for <a class=\"struct\" href=\"openzl_crypto/poseidon/struct.State.html\" title=\"struct openzl_crypto::poseidon::State\">State</a>&lt;S&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.Specification.html\" title=\"trait openzl_crypto::poseidon::Specification\">Specification</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"associatedtype\" href=\"openzl_crypto/poseidon/trait.Field.html#associatedtype.Field\" title=\"type openzl_crypto::poseidon::Field::Field\">Field</a>: <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>"],["impl&lt;S, COM&gt; <a class=\"trait\" href=\"openzl_util/rand/trait.Sample.html\" title=\"trait openzl_util::rand::Sample\">Sample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt; for <a class=\"struct\" href=\"openzl_crypto/poseidon/struct.Permutation.html\" title=\"struct openzl_crypto::poseidon::Permutation\">Permutation</a>&lt;S, COM&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.Specification.html\" title=\"trait openzl_crypto::poseidon::Specification\">Specification</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"associatedtype\" href=\"openzl_crypto/poseidon/trait.ParameterFieldType.html#associatedtype.ParameterField\" title=\"type openzl_crypto::poseidon::ParameterFieldType::ParameterField\">ParameterField</a>: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.NativeField.html\" title=\"trait openzl_crypto::poseidon::NativeField\">NativeField</a> + <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.FieldGeneration.html\" title=\"trait openzl_crypto::poseidon::FieldGeneration\">FieldGeneration</a>,</span>"]],
"openzl_plugin_arkworks":[["impl&lt;P&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_plugin_arkworks/rand/struct.Standard.html\" title=\"struct openzl_plugin_arkworks::rand::Standard\">Standard</a>&gt; for GroupProjective&lt;P&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: SWModelParameters,</span>"],["impl&lt;P&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_plugin_arkworks/rand/struct.Standard.html\" title=\"struct openzl_plugin_arkworks::rand::Standard\">Standard</a>&gt; for GroupAffine&lt;P&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: SWModelParameters,</span>"],["impl&lt;P&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_plugin_arkworks/rand/struct.Standard.html\" title=\"struct openzl_plugin_arkworks::rand::Standard\">Standard</a>&gt; for GroupProjective&lt;P&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: TEModelParameters,</span>"],["impl&lt;P&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_plugin_arkworks/rand/struct.Standard.html\" title=\"struct openzl_plugin_arkworks::rand::Standard\">Standard</a>&gt; for GroupAffine&lt;P&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: TEModelParameters,</span>"],["impl&lt;P&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_plugin_arkworks/rand/struct.Standard.html\" title=\"struct openzl_plugin_arkworks::rand::Standard\">Standard</a>&gt; for <a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp64.html\" title=\"struct openzl_plugin_arkworks::ff::Fp64\">Fp64</a>&lt;P&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp64.html\" title=\"struct openzl_plugin_arkworks::ff::Fp64\">Fp64</a>&lt;P&gt;: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.UniformRand.html\" title=\"trait openzl_plugin_arkworks::ff::UniformRand\">UniformRand</a>,</span>"],["impl&lt;P&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_plugin_arkworks/rand/struct.Standard.html\" title=\"struct openzl_plugin_arkworks::rand::Standard\">Standard</a>&gt; for <a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp256.html\" title=\"struct openzl_plugin_arkworks::ff::Fp256\">Fp256</a>&lt;P&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp256.html\" title=\"struct openzl_plugin_arkworks::ff::Fp256\">Fp256</a>&lt;P&gt;: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.UniformRand.html\" title=\"trait openzl_plugin_arkworks::ff::UniformRand\">UniformRand</a>,</span>"],["impl&lt;P&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_plugin_arkworks/rand/struct.Standard.html\" title=\"struct openzl_plugin_arkworks::rand::Standard\">Standard</a>&gt; for <a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp320.html\" title=\"struct openzl_plugin_arkworks::ff::Fp320\">Fp320</a>&lt;P&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp320.html\" title=\"struct openzl_plugin_arkworks::ff::Fp320\">Fp320</a>&lt;P&gt;: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.UniformRand.html\" title=\"trait openzl_plugin_arkworks::ff::UniformRand\">UniformRand</a>,</span>"],["impl&lt;P&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_plugin_arkworks/rand/struct.Standard.html\" title=\"struct openzl_plugin_arkworks::rand::Standard\">Standard</a>&gt; for <a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp384.html\" title=\"struct openzl_plugin_arkworks::ff::Fp384\">Fp384</a>&lt;P&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp384.html\" title=\"struct openzl_plugin_arkworks::ff::Fp384\">Fp384</a>&lt;P&gt;: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.UniformRand.html\" title=\"trait openzl_plugin_arkworks::ff::UniformRand\">UniformRand</a>,</span>"],["impl&lt;P&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_plugin_arkworks/rand/struct.Standard.html\" title=\"struct openzl_plugin_arkworks::rand::Standard\">Standard</a>&gt; for <a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp448.html\" title=\"struct openzl_plugin_arkworks::ff::Fp448\">Fp448</a>&lt;P&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp448.html\" title=\"struct openzl_plugin_arkworks::ff::Fp448\">Fp448</a>&lt;P&gt;: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.UniformRand.html\" title=\"trait openzl_plugin_arkworks::ff::UniformRand\">UniformRand</a>,</span>"],["impl&lt;P&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_plugin_arkworks/rand/struct.Standard.html\" title=\"struct openzl_plugin_arkworks::rand::Standard\">Standard</a>&gt; for <a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp768.html\" title=\"struct openzl_plugin_arkworks::ff::Fp768\">Fp768</a>&lt;P&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp768.html\" title=\"struct openzl_plugin_arkworks::ff::Fp768\">Fp768</a>&lt;P&gt;: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.UniformRand.html\" title=\"trait openzl_plugin_arkworks::ff::UniformRand\">UniformRand</a>,</span>"],["impl&lt;P&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"struct\" href=\"openzl_plugin_arkworks/rand/struct.Standard.html\" title=\"struct openzl_plugin_arkworks::rand::Standard\">Standard</a>&gt; for <a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp832.html\" title=\"struct openzl_plugin_arkworks::ff::Fp832\">Fp832</a>&lt;P&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"struct\" href=\"openzl_plugin_arkworks/ff/struct.Fp832.html\" title=\"struct openzl_plugin_arkworks::ff::Fp832\">Fp832</a>&lt;P&gt;: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.UniformRand.html\" title=\"trait openzl_plugin_arkworks::ff::UniformRand\">UniformRand</a>,</span>"],["impl&lt;F&gt; <a class=\"trait\" href=\"openzl_plugin_arkworks/rand/trait.Sample.html\" title=\"trait openzl_plugin_arkworks::rand::Sample\">Sample</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt; for <a class=\"struct\" href=\"openzl_plugin_arkworks/constraint/fp/struct.Fp.html\" title=\"struct openzl_plugin_arkworks::constraint::fp::Fp\">Fp</a>&lt;F&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.Field.html\" title=\"trait openzl_plugin_arkworks::ff::Field\">Field</a>,</span>"]],
"openzl_util":[]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()