(function() {var implementors = {
"eclair":[],
"openzl_crypto":[["impl&lt;M, W, O, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Derived.html\" title=\"struct eclair::alloc::mode::Derived\">Derived</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(W, O)</a>&gt;, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/accumulator/struct.MembershipProof.html\" title=\"struct openzl_crypto::accumulator::MembershipProof\">MembershipProof</a>&lt;M&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt; + <a class=\"trait\" href=\"openzl_crypto/accumulator/trait.Model.html\" title=\"trait openzl_crypto::accumulator::Model\">Model</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;M::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/accumulator/trait.Model.html\" title=\"trait openzl_crypto::accumulator::Model\">Model</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;M::<a class=\"associatedtype\" href=\"openzl_crypto/accumulator/trait.Types.html#associatedtype.Witness\" title=\"type openzl_crypto::accumulator::Types::Witness\">Witness</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;W, COM, Type = &lt;M::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a> as <a class=\"trait\" href=\"openzl_crypto/accumulator/trait.Types.html\" title=\"trait openzl_crypto::accumulator::Types\">Types</a>&gt;::<a class=\"associatedtype\" href=\"openzl_crypto/accumulator/trait.Types.html#associatedtype.Witness\" title=\"type openzl_crypto::accumulator::Types::Witness\">Witness</a>&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;M::<a class=\"associatedtype\" href=\"openzl_crypto/accumulator/trait.Types.html#associatedtype.Output\" title=\"type openzl_crypto::accumulator::Types::Output\">Output</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;O, COM, Type = &lt;M::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a> as <a class=\"trait\" href=\"openzl_crypto/accumulator/trait.Types.html\" title=\"trait openzl_crypto::accumulator::Types\">Types</a>&gt;::<a class=\"associatedtype\" href=\"openzl_crypto/accumulator/trait.Types.html#associatedtype.Output\" title=\"type openzl_crypto::accumulator::Types::Output\">Output</a>&gt;,</span>"],["impl&lt;K, E, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/hybrid/struct.Randomness.html\" title=\"struct openzl_crypto::encryption::hybrid::Randomness\">Randomness</a>&lt;K, E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: <a class=\"trait\" href=\"openzl_crypto/key/agreement/trait.EphemeralSecretKeyType.html\" title=\"trait openzl_crypto::key::agreement::EphemeralSecretKeyType\">EphemeralSecretKeyType</a> + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.RandomnessType.html\" title=\"trait openzl_crypto::encryption::RandomnessType\">RandomnessType</a> + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::<a class=\"associatedtype\" href=\"openzl_crypto/key/agreement/trait.EphemeralSecretKeyType.html#associatedtype.EphemeralSecretKey\" title=\"type openzl_crypto::key::agreement::EphemeralSecretKeyType::EphemeralSecretKey\">EphemeralSecretKey</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, COM, Type = <a class=\"type\" href=\"openzl_crypto/key/agreement/type.EphemeralSecretKey.html\" title=\"type openzl_crypto::key::agreement::EphemeralSecretKey\">EphemeralSecretKey</a>&lt;K::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.RandomnessType.html#associatedtype.Randomness\" title=\"type openzl_crypto::encryption::RandomnessType::Randomness\">Randomness</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, COM, Type = <a class=\"type\" href=\"openzl_crypto/encryption/type.Randomness.html\" title=\"type openzl_crypto::encryption::Randomness\">Randomness</a>&lt;E::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/key/agreement/trait.EphemeralSecretKeyType.html\" title=\"trait openzl_crypto::key::agreement::EphemeralSecretKeyType\">EphemeralSecretKeyType</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.RandomnessType.html\" title=\"trait openzl_crypto::encryption::RandomnessType\">RandomnessType</a>,</span>"],["impl&lt;K, E, ESK, R, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Derived.html\" title=\"struct eclair::alloc::mode::Derived\">Derived</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(ESK, R)</a>&gt;, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/hybrid/struct.Randomness.html\" title=\"struct openzl_crypto::encryption::hybrid::Randomness\">Randomness</a>&lt;K, E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: <a class=\"trait\" href=\"openzl_crypto/key/agreement/trait.EphemeralSecretKeyType.html\" title=\"trait openzl_crypto::key::agreement::EphemeralSecretKeyType\">EphemeralSecretKeyType</a> + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.RandomnessType.html\" title=\"trait openzl_crypto::encryption::RandomnessType\">RandomnessType</a> + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::<a class=\"associatedtype\" href=\"openzl_crypto/key/agreement/trait.EphemeralSecretKeyType.html#associatedtype.EphemeralSecretKey\" title=\"type openzl_crypto::key::agreement::EphemeralSecretKeyType::EphemeralSecretKey\">EphemeralSecretKey</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;ESK, COM, Type = <a class=\"type\" href=\"openzl_crypto/key/agreement/type.EphemeralSecretKey.html\" title=\"type openzl_crypto::key::agreement::EphemeralSecretKey\">EphemeralSecretKey</a>&lt;K::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.RandomnessType.html#associatedtype.Randomness\" title=\"type openzl_crypto::encryption::RandomnessType::Randomness\">Randomness</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;R, COM, Type = <a class=\"type\" href=\"openzl_crypto/encryption/type.Randomness.html\" title=\"type openzl_crypto::encryption::Randomness\">Randomness</a>&lt;E::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/key/agreement/trait.EphemeralSecretKeyType.html\" title=\"trait openzl_crypto::key::agreement::EphemeralSecretKeyType\">EphemeralSecretKeyType</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.RandomnessType.html\" title=\"trait openzl_crypto::encryption::RandomnessType\">RandomnessType</a>,</span>"],["impl&lt;K, E, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/hybrid/struct.Ciphertext.html\" title=\"struct openzl_crypto::encryption::hybrid::Ciphertext\">Ciphertext</a>&lt;K, E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: <a class=\"trait\" href=\"openzl_crypto/key/agreement/trait.EphemeralPublicKeyType.html\" title=\"trait openzl_crypto::key::agreement::EphemeralPublicKeyType\">EphemeralPublicKeyType</a> + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.CiphertextType.html\" title=\"trait openzl_crypto::encryption::CiphertextType\">CiphertextType</a> + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::<a class=\"associatedtype\" href=\"openzl_crypto/key/agreement/trait.EphemeralPublicKeyType.html#associatedtype.EphemeralPublicKey\" title=\"type openzl_crypto::key::agreement::EphemeralPublicKeyType::EphemeralPublicKey\">EphemeralPublicKey</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM, Type = <a class=\"type\" href=\"openzl_crypto/key/agreement/type.EphemeralPublicKey.html\" title=\"type openzl_crypto::key::agreement::EphemeralPublicKey\">EphemeralPublicKey</a>&lt;K::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.CiphertextType.html#associatedtype.Ciphertext\" title=\"type openzl_crypto::encryption::CiphertextType::Ciphertext\">Ciphertext</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM, Type = <a class=\"type\" href=\"openzl_crypto/encryption/type.Ciphertext.html\" title=\"type openzl_crypto::encryption::Ciphertext\">Ciphertext</a>&lt;E::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/key/agreement/trait.EphemeralPublicKeyType.html\" title=\"trait openzl_crypto::key::agreement::EphemeralPublicKeyType\">EphemeralPublicKeyType</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.CiphertextType.html\" title=\"trait openzl_crypto::encryption::CiphertextType\">CiphertextType</a>,</span>"],["impl&lt;K, E, EPK, C, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Derived.html\" title=\"struct eclair::alloc::mode::Derived\">Derived</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(EPK, C)</a>&gt;, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/hybrid/struct.Ciphertext.html\" title=\"struct openzl_crypto::encryption::hybrid::Ciphertext\">Ciphertext</a>&lt;K, E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: <a class=\"trait\" href=\"openzl_crypto/key/agreement/trait.EphemeralPublicKeyType.html\" title=\"trait openzl_crypto::key::agreement::EphemeralPublicKeyType\">EphemeralPublicKeyType</a> + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.CiphertextType.html\" title=\"trait openzl_crypto::encryption::CiphertextType\">CiphertextType</a> + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::<a class=\"associatedtype\" href=\"openzl_crypto/key/agreement/trait.EphemeralPublicKeyType.html#associatedtype.EphemeralPublicKey\" title=\"type openzl_crypto::key::agreement::EphemeralPublicKeyType::EphemeralPublicKey\">EphemeralPublicKey</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;EPK, COM, Type = <a class=\"type\" href=\"openzl_crypto/key/agreement/type.EphemeralPublicKey.html\" title=\"type openzl_crypto::key::agreement::EphemeralPublicKey\">EphemeralPublicKey</a>&lt;K::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.CiphertextType.html#associatedtype.Ciphertext\" title=\"type openzl_crypto::encryption::CiphertextType::Ciphertext\">Ciphertext</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;C, COM, Type = <a class=\"type\" href=\"openzl_crypto/encryption/type.Ciphertext.html\" title=\"type openzl_crypto::encryption::Ciphertext\">Ciphertext</a>&lt;E::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/key/agreement/trait.EphemeralPublicKeyType.html\" title=\"trait openzl_crypto::key::agreement::EphemeralPublicKeyType\">EphemeralPublicKeyType</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.CiphertextType.html\" title=\"trait openzl_crypto::encryption::CiphertextType\">CiphertextType</a>,</span>"],["impl&lt;M, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;M, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/struct.EmptyHeader.html\" title=\"struct openzl_crypto::encryption::EmptyHeader\">EmptyHeader</a>&lt;COM&gt;"],["impl&lt;T, M, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;M, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/struct.UnsafeOutput.html\" title=\"struct openzl_crypto::encryption::UnsafeOutput\">UnsafeOutput</a>&lt;T, COM&gt;"],["impl&lt;E, H, P, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Derived.html\" title=\"struct eclair::alloc::mode::Derived\">Derived</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(H, P)</a>&gt;, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/struct.Message.html\" title=\"struct openzl_crypto::encryption::Message\">Message</a>&lt;E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.HeaderType.html\" title=\"trait openzl_crypto::encryption::HeaderType\">HeaderType</a> + <a class=\"trait\" href=\"openzl_crypto/encryption/trait.PlaintextType.html\" title=\"trait openzl_crypto::encryption::PlaintextType\">PlaintextType</a> + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.HeaderType.html#associatedtype.Header\" title=\"type openzl_crypto::encryption::HeaderType::Header\">Header</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;H, COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.PlaintextType.html#associatedtype.Plaintext\" title=\"type openzl_crypto::encryption::PlaintextType::Plaintext\">Plaintext</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;P, COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.HeaderType.html\" title=\"trait openzl_crypto::encryption::HeaderType\">HeaderType</a>&lt;Header = <a class=\"type\" href=\"eclair/alloc/type.Var.html\" title=\"type eclair::alloc::Var\">Var</a>&lt;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.HeaderType.html#associatedtype.Header\" title=\"type openzl_crypto::encryption::HeaderType::Header\">Header</a>, H, COM&gt;&gt; + <a class=\"trait\" href=\"openzl_crypto/encryption/trait.PlaintextType.html\" title=\"trait openzl_crypto::encryption::PlaintextType\">PlaintextType</a>&lt;Plaintext = <a class=\"type\" href=\"eclair/alloc/type.Var.html\" title=\"type eclair::alloc::Var\">Var</a>&lt;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.PlaintextType.html#associatedtype.Plaintext\" title=\"type openzl_crypto::encryption::PlaintextType::Plaintext\">Plaintext</a>, P, COM&gt;&gt;,</span>"],["impl&lt;E, H, C, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Derived.html\" title=\"struct eclair::alloc::mode::Derived\">Derived</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(H, C)</a>&gt;, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/struct.EncryptedMessage.html\" title=\"struct openzl_crypto::encryption::EncryptedMessage\">EncryptedMessage</a>&lt;E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.CiphertextType.html\" title=\"trait openzl_crypto::encryption::CiphertextType\">CiphertextType</a> + <a class=\"trait\" href=\"openzl_crypto/encryption/trait.HeaderType.html\" title=\"trait openzl_crypto::encryption::HeaderType\">HeaderType</a> + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.HeaderType.html#associatedtype.Header\" title=\"type openzl_crypto::encryption::HeaderType::Header\">Header</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;H, COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.CiphertextType.html#associatedtype.Ciphertext\" title=\"type openzl_crypto::encryption::CiphertextType::Ciphertext\">Ciphertext</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;C, COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.CiphertextType.html\" title=\"trait openzl_crypto::encryption::CiphertextType\">CiphertextType</a>&lt;Ciphertext = <a class=\"type\" href=\"eclair/alloc/type.Var.html\" title=\"type eclair::alloc::Var\">Var</a>&lt;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.CiphertextType.html#associatedtype.Ciphertext\" title=\"type openzl_crypto::encryption::CiphertextType::Ciphertext\">Ciphertext</a>, C, COM&gt;&gt; + <a class=\"trait\" href=\"openzl_crypto/encryption/trait.HeaderType.html\" title=\"trait openzl_crypto::encryption::HeaderType\">HeaderType</a>&lt;Header = <a class=\"type\" href=\"eclair/alloc/type.Var.html\" title=\"type eclair::alloc::Var\">Var</a>&lt;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.HeaderType.html#associatedtype.Header\" title=\"type openzl_crypto::encryption::HeaderType::Header\">Header</a>, H, COM&gt;&gt;,</span>"],["impl&lt;E, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/encryption/struct.EncryptedMessage.html\" title=\"struct openzl_crypto::encryption::EncryptedMessage\">EncryptedMessage</a>&lt;E&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.CiphertextType.html\" title=\"trait openzl_crypto::encryption::CiphertextType\">CiphertextType</a> + <a class=\"trait\" href=\"openzl_crypto/encryption/trait.HeaderType.html\" title=\"trait openzl_crypto::encryption::HeaderType\">HeaderType</a> + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.HeaderType.html#associatedtype.Header\" title=\"type openzl_crypto::encryption::HeaderType::Header\">Header</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.CiphertextType.html#associatedtype.Ciphertext\" title=\"type openzl_crypto::encryption::CiphertextType::Ciphertext\">Ciphertext</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/encryption/trait.CiphertextType.html\" title=\"trait openzl_crypto::encryption::CiphertextType\">CiphertextType</a>&lt;Ciphertext = <a class=\"type\" href=\"eclair/alloc/type.Var.html\" title=\"type eclair::alloc::Var\">Var</a>&lt;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.CiphertextType.html#associatedtype.Ciphertext\" title=\"type openzl_crypto::encryption::CiphertextType::Ciphertext\">Ciphertext</a>, <a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;&gt; + <a class=\"trait\" href=\"openzl_crypto/encryption/trait.HeaderType.html\" title=\"trait openzl_crypto::encryption::HeaderType\">HeaderType</a>&lt;Header = <a class=\"type\" href=\"eclair/alloc/type.Var.html\" title=\"type eclair::alloc::Var\">Var</a>&lt;E::<a class=\"associatedtype\" href=\"openzl_crypto/encryption/trait.HeaderType.html#associatedtype.Header\" title=\"type openzl_crypto::encryption::HeaderType::Header\">Header</a>, <a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;&gt;,</span>"],["impl&lt;T, C, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/permutation/duplex/struct.Ciphertext.html\" title=\"struct openzl_crypto::permutation::duplex::Ciphertext\">Ciphertext</a>&lt;T, C&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;,</span>"],["impl&lt;C, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/merkle_tree/path/constraint/struct.InnerPathVar.html\" title=\"struct openzl_crypto::merkle_tree::path::constraint::InnerPathVar\">InnerPathVar</a>&lt;C, COM&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;COM: <a class=\"trait\" href=\"eclair/trait.Has.html\" title=\"trait eclair::Has\">Has</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"type\" href=\"eclair/bool/type.Bool.html\" title=\"type eclair::bool::Bool\">Bool</a>&lt;COM&gt;: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, COM, Type = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: <a class=\"trait\" href=\"openzl_crypto/merkle_tree/tree/trait.Configuration.html\" title=\"trait openzl_crypto::merkle_tree::tree::Configuration\">Configuration</a>&lt;COM&gt; + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;C::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/merkle_tree/tree/trait.Configuration.html\" title=\"trait openzl_crypto::merkle_tree::tree::Configuration\">Configuration</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"type\" href=\"openzl_crypto/merkle_tree/tree/type.InnerDigest.html\" title=\"type openzl_crypto::merkle_tree::tree::InnerDigest\">InnerDigest</a>&lt;C, COM&gt;: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, COM, Type = <a class=\"type\" href=\"openzl_crypto/merkle_tree/tree/type.InnerDigest.html\" title=\"type openzl_crypto::merkle_tree::tree::InnerDigest\">InnerDigest</a>&lt;C::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>&gt;&gt;,</span>"],["impl&lt;C, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/merkle_tree/path/constraint/struct.PathVar.html\" title=\"struct openzl_crypto::merkle_tree::path::constraint::PathVar\">PathVar</a>&lt;C, COM&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;COM: <a class=\"trait\" href=\"eclair/trait.Has.html\" title=\"trait eclair::Has\">Has</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"type\" href=\"eclair/bool/type.Bool.html\" title=\"type eclair::bool::Bool\">Bool</a>&lt;COM&gt;: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, COM, Type = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: <a class=\"trait\" href=\"openzl_crypto/merkle_tree/tree/trait.Configuration.html\" title=\"trait openzl_crypto::merkle_tree::tree::Configuration\">Configuration</a>&lt;COM&gt; + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;C::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/merkle_tree/tree/trait.Configuration.html\" title=\"trait openzl_crypto::merkle_tree::tree::Configuration\">Configuration</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"type\" href=\"openzl_crypto/merkle_tree/tree/type.InnerDigest.html\" title=\"type openzl_crypto::merkle_tree::tree::InnerDigest\">InnerDigest</a>&lt;C, COM&gt;: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, COM, Type = <a class=\"type\" href=\"openzl_crypto/merkle_tree/tree/type.InnerDigest.html\" title=\"type openzl_crypto::merkle_tree::tree::InnerDigest\">InnerDigest</a>&lt;C::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"type\" href=\"openzl_crypto/merkle_tree/tree/type.LeafDigest.html\" title=\"type openzl_crypto::merkle_tree::tree::LeafDigest\">LeafDigest</a>&lt;C, COM&gt;: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, COM, Type = <a class=\"type\" href=\"openzl_crypto/merkle_tree/tree/type.LeafDigest.html\" title=\"type openzl_crypto::merkle_tree::tree::LeafDigest\">LeafDigest</a>&lt;C::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>&gt;&gt;,</span>"],["impl&lt;S, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/poseidon/encryption/struct.PlaintextBlock.html\" title=\"struct openzl_crypto::poseidon::encryption::PlaintextBlock\">PlaintextBlock</a>&lt;S, COM&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.Specification.html\" title=\"trait openzl_crypto::poseidon::Specification\">Specification</a>&lt;COM&gt; + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"associatedtype\" href=\"openzl_crypto/poseidon/trait.Field.html#associatedtype.Field\" title=\"type openzl_crypto::poseidon::Field::Field\">Field</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.Specification.html\" title=\"trait openzl_crypto::poseidon::Specification\">Specification</a>&lt;Field = <a class=\"type\" href=\"eclair/alloc/type.Var.html\" title=\"type eclair::alloc::Var\">Var</a>&lt;S::<a class=\"associatedtype\" href=\"openzl_crypto/poseidon/trait.Field.html#associatedtype.Field\" title=\"type openzl_crypto::poseidon::Field::Field\">Field</a>, <a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;&gt;,</span>"],["impl&lt;S, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/poseidon/encryption/struct.CiphertextBlock.html\" title=\"struct openzl_crypto::poseidon::encryption::CiphertextBlock\">CiphertextBlock</a>&lt;S, COM&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.Specification.html\" title=\"trait openzl_crypto::poseidon::Specification\">Specification</a>&lt;COM&gt; + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"associatedtype\" href=\"openzl_crypto/poseidon/trait.Field.html#associatedtype.Field\" title=\"type openzl_crypto::poseidon::Field::Field\">Field</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.Specification.html\" title=\"trait openzl_crypto::poseidon::Specification\">Specification</a>&lt;Field = <a class=\"type\" href=\"eclair/alloc/type.Var.html\" title=\"type eclair::alloc::Var\">Var</a>&lt;S::<a class=\"associatedtype\" href=\"openzl_crypto/poseidon/trait.Field.html#associatedtype.Field\" title=\"type openzl_crypto::poseidon::Field::Field\">Field</a>, <a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;&gt;,</span>"],["impl&lt;B, const N:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, M, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;M, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/poseidon/encryption/struct.BlockArray.html\" title=\"struct openzl_crypto::poseidon::encryption::BlockArray\">BlockArray</a>&lt;B, N&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;M, COM&gt;,</span>"],["impl&lt;S, COM&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt; for <a class=\"struct\" href=\"openzl_crypto/poseidon/encryption/struct.Tag.html\" title=\"struct openzl_crypto::poseidon::encryption::Tag\">Tag</a>&lt;S, COM&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.Specification.html\" title=\"trait openzl_crypto::poseidon::Specification\">Specification</a>&lt;COM&gt; + <a class=\"trait\" href=\"eclair/alloc/trait.Constant.html\" title=\"trait eclair::alloc::Constant\">Constant</a>&lt;COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"associatedtype\" href=\"openzl_crypto/poseidon/trait.Field.html#associatedtype.Field\" title=\"type openzl_crypto::poseidon::Field::Field\">Field</a>: <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"associatedtype\" href=\"eclair/alloc/trait.Constant.html#associatedtype.Type\" title=\"type eclair::alloc::Constant::Type\">Type</a>: <a class=\"trait\" href=\"openzl_crypto/poseidon/trait.Specification.html\" title=\"trait openzl_crypto::poseidon::Specification\">Specification</a>&lt;Field = <a class=\"type\" href=\"eclair/alloc/type.Var.html\" title=\"type eclair::alloc::Var\">Var</a>&lt;S::<a class=\"associatedtype\" href=\"openzl_crypto/poseidon/trait.Field.html#associatedtype.Field\" title=\"type openzl_crypto::poseidon::Field::Field\">Field</a>, <a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, COM&gt;&gt;,</span>"]],
"openzl_plugin_arkworks":[["impl&lt;F&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, <a class=\"struct\" href=\"openzl_plugin_arkworks/constraint/struct.R1CS.html\" title=\"struct openzl_plugin_arkworks::constraint::R1CS\">R1CS</a>&lt;F&gt;&gt; for <a class=\"enum\" href=\"openzl_plugin_arkworks/constraint/enum.Boolean.html\" title=\"enum openzl_plugin_arkworks::constraint::Boolean\">Boolean</a>&lt;F&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.PrimeField.html\" title=\"trait openzl_plugin_arkworks::ff::PrimeField\">PrimeField</a>,</span>"],["impl&lt;F&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, <a class=\"struct\" href=\"openzl_plugin_arkworks/constraint/struct.R1CS.html\" title=\"struct openzl_plugin_arkworks::constraint::R1CS\">R1CS</a>&lt;F&gt;&gt; for <a class=\"enum\" href=\"openzl_plugin_arkworks/constraint/enum.Boolean.html\" title=\"enum openzl_plugin_arkworks::constraint::Boolean\">Boolean</a>&lt;F&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.PrimeField.html\" title=\"trait openzl_plugin_arkworks::ff::PrimeField\">PrimeField</a>,</span>"],["impl&lt;F&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Public.html\" title=\"struct eclair::alloc::mode::Public\">Public</a>, <a class=\"struct\" href=\"openzl_plugin_arkworks/constraint/struct.R1CS.html\" title=\"struct openzl_plugin_arkworks::constraint::R1CS\">R1CS</a>&lt;F&gt;&gt; for <a class=\"enum\" href=\"openzl_plugin_arkworks/constraint/enum.FpVar.html\" title=\"enum openzl_plugin_arkworks::constraint::FpVar\">FpVar</a>&lt;F&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.PrimeField.html\" title=\"trait openzl_plugin_arkworks::ff::PrimeField\">PrimeField</a>,</span>"],["impl&lt;F&gt; <a class=\"trait\" href=\"eclair/alloc/trait.Variable.html\" title=\"trait eclair::alloc::Variable\">Variable</a>&lt;<a class=\"struct\" href=\"eclair/alloc/mode/struct.Secret.html\" title=\"struct eclair::alloc::mode::Secret\">Secret</a>, <a class=\"struct\" href=\"openzl_plugin_arkworks/constraint/struct.R1CS.html\" title=\"struct openzl_plugin_arkworks::constraint::R1CS\">R1CS</a>&lt;F&gt;&gt; for <a class=\"enum\" href=\"openzl_plugin_arkworks/constraint/enum.FpVar.html\" title=\"enum openzl_plugin_arkworks::constraint::FpVar\">FpVar</a>&lt;F&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"openzl_plugin_arkworks/ff/trait.PrimeField.html\" title=\"trait openzl_plugin_arkworks::ff::PrimeField\">PrimeField</a>,</span>"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()