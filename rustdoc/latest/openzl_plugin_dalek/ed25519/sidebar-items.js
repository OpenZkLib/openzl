window.SIDEBAR_ITEMS = {"constant":[["EXPANDED_SECRET_KEY_LENGTH","The length of an “expanded” ed25519 key, `ExpandedSecretKey`, in bytes."],["KEYPAIR_LENGTH","The length of an ed25519 `Keypair`, in bytes."],["PUBLIC_KEY_LENGTH","The length of an ed25519 `PublicKey`, in bytes."],["SECRET_KEY_LENGTH","The length of a ed25519 `SecretKey`, in bytes."],["SIGNATURE_LENGTH","The length of a ed25519 `Signature`, in bytes."]],"fn":[["clone_secret_key","Clones the `secret_key` by serializing and then deserializing."],["generate_keypair","Generates a [`Keypair`] from `rng`."],["generate_secret_key","Generates a [`SecretKey`] from `rng`."],["keypair","Generates a [`Keypair`] from `secret_key`."],["public_key_from_bytes","Converts the `bytes` fixed-length array into [`PublicKey`]."],["secret_key_from_bytes","Converts the `bytes` fixed-length array into [`SecretKey`]."],["signature_from_bytes","Converts the `bytes` fixed-length array into [`Signature`]."]],"macro":[["byte_conversion","Implements byte conversion from an array of bytes of length `$len` into the given `$type`. These implementations are prefered over the ones provided by [`ed25519_dalek`] because they have no error branch."]],"mod":[["ed25519","RustCrypto: Ed25519"]],"struct":[["Ed25519","Edwards Curve Signature Scheme for the `Curve25519` Elliptic Curve"],["ExpandedSecretKey","An “expanded” secret key."],["Keypair","An ed25519 keypair."],["PublicKey","An ed25519 public key."],["SecretKey","An EdDSA secret key."],["Sha512","The SHA-512 hash algorithm with the SHA-512 initial hash value."],["Signature","Ed25519 signature."]],"trait":[["Digest","The `Digest` trait specifies an interface common for digest functions."],["Signer","Sign the provided message bytestring using `Self` (e.g. a cryptographic key or connection to an HSM), returning a digital signature."],["Verifier","Verify the provided message bytestring using `Self` (e.g. a public key)"]],"type":[["SignatureError","Errors which may occur while processing signatures and keypairs."]]};