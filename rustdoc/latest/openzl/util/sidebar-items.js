window.SIDEBAR_ITEMS = {"fn":[["array_map","Maps `f` over the `array` using allocation."],["array_map_ref","Maps `f` over the `array` by reference using allocation."],["byte_count","Counts the number of bytes required to encode a number with the given number of `bits`."],["fallible_array_map","Maps `f` over the `array` returning the target array if all of the mappings succeeded, or returning the first error that occurs."],["fallible_array_map_ref","Maps `f` over the `array` by reference returning the target array if all of the mappings succeeded, or returning the first error that occurs."],["into_array_unchecked","Performs the [`TryInto`] conversion into an array without checking if the conversion succeeded."],["into_boxed_array_unchecked","Performs the [`TryInto`] conversion into a boxed array without checking if the conversion succeeded."]],"macro":[["assert_all_eq_len","Asserts that all the elements in `$tail` have the same length as `$head`."],["cfg_chunks","Calls the `chunks` method on `$e` or the `par_chunks` Rayon method if the `rayon` feature is enabled."],["cfg_chunks_mut","Calls the `chunks_mut` method on `$e` or the `par_chunks_mut` Rayon method if the `rayon` feature is enabled."],["cfg_into_iter","Calls the `into_iter` method on `$e` or the `into_par_iter` Rayon method if the `rayon` feature is enabled."],["cfg_iter","Calls the `iter` method on `$e` or the `par_iter` Rayon method if the `rayon` feature is enabled."],["cfg_iter_mut","Calls the `iter_mut` method on `$e` or the `par_iter_mut` Rayon method if the `rayon` feature is enabled."],["cfg_reduce","Calls the `fold` method on `$e` or the `reduce` Rayon method if the `rayon` feature is enabled."],["create_seal","Creates a new `sealed::Sealed` trait in the current module."],["from_variant","Implements [`From`]`<$from>` for an enum `$to`, choosing the `$kind` variant."],["impl_empty_codec","Implements [`Decode`] and [`Encode`] for a type with no data that implements [`Default`]."],["seal","Adds a `sealed::Sealed` implementation to `$type`."]],"mod":[["cmp","Comparison Utilities"],["codec","Encoding and Decoding Utilities"],["collections","Collection Types"],["convert","Conversion Utilities"],["derivative",""],["future","Futures Utilities"],["http","HTTP Utilities"],["iter","Iteration Utilities"],["num","Numeric Utilities"],["ops","Operations Utilities"],["persistence","Persistence and Backups Utilities"],["pointer","Pointer Utilities"],["rand","Random Number Generators"],["rayon","Data-parallelism library that makes it easy to convert sequential computations into parallel"],["serde","Serde"],["serde_with","crates.io badge Build Status codecov CII Best Practices Rustexplorer"],["time","Temporal quantification."],["vec","Vectors"]],"struct":[["Array","Array"],["BoxArray","Boxed Array"]],"trait":[["AsBytes","Byte Vector Conversion"],["Bytes","Exact Bytes Conversion"],["FromBytes","Exact From Bytes Conversion"],["IntoBytes","Exact Into Bytes Conversion"],["IsType","Type Identity Reflection Mechanism"],["SizeLimit","Size Limit"]]};