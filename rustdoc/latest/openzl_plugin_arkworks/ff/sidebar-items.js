window.SIDEBAR_ITEMS = {"enum":[["LegendreSymbol",""]],"fn":[["batch_inversion",""],["batch_inversion_and_mul",""],["characteristic_square_mod_6_is_one",""],["signed_mod_reduction",""],["try_into_u128","Tries to convert a field element `x` into an integer of type `u128`."],["try_into_u16","Tries to convert a field element `x` into an integer of type `u16`."],["try_into_u32","Tries to convert a field element `x` into an integer of type `u32`."],["try_into_u64","Tries to convert a field element `x` into an integer of type `u64`."],["try_into_u8","Tries to convert a field element `x` into an integer of type `u8`."]],"macro":[["field_new",""],["field_try_into","Implements a fallible conversion from `F` to `$type`."],["impl_additive_ops_from_ref",""],["impl_multiplicative_ops_from_ref",""],["push_to_vec",""],["to_bytes","Takes as input a sequence of structs, and converts them to a series of bytes. All traits that implement `Bytes` can be automatically converted to bytes in this manner."],["vec","Creates a `Vec` containing the arguments."]],"mod":[["biginteger",""],["bytes",""],["fields",""],["prelude",""],["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."]],"struct":[["BigInteger128",""],["BigInteger256",""],["BigInteger320",""],["BigInteger384",""],["BigInteger448",""],["BigInteger64",""],["BigInteger768",""],["BigInteger832",""],["BitIteratorBE","Iterates over a slice of `u64` in big-endian order."],["BitIteratorLE","Iterates over a slice of `u64` in little-endian order."],["CubicExtField",""],["Fp12ParamsWrapper",""],["Fp256","Represents an element of the prime field F_p, where `p == P::MODULUS`. This type can represent elements in any field of size at most 256 bits."],["Fp2ParamsWrapper",""],["Fp320","Represents an element of the prime field F_p, where `p == P::MODULUS`. This type can represent elements in any field of size at most 320 bits."],["Fp384","Represents an element of the prime field F_p, where `p == P::MODULUS`. This type can represent elements in any field of size at most 384 bits."],["Fp3ParamsWrapper",""],["Fp448","Represents an element of the prime field F_p, where `p == P::MODULUS`. This type can represent elements in any field of size at most 448 bits."],["Fp4ParamsWrapper",""],["Fp64","Represents an element of the prime field F_p, where `p == P::MODULUS`. This type can represent elements in any field of size at most 64 bits."],["Fp6ParamsWrapper",""],["Fp768","Represents an element of the prime field F_p, where `p == P::MODULUS`. This type can represent elements in any field of size at most 768 bits."],["Fp832","Represents an element of the prime field F_p, where `p == P::MODULUS`. This type can represent elements in any field of size at most 832 bits."],["QuadExtField","An element of a quadratic extension field F_p[X]/(X^2 - P::NONRESIDUE) is represented as c0 + c1 * X, for c0, c1 in `P::BaseField`."]],"trait":[["BigInteger","This defines a `BigInteger`, a smart wrapper around a sequence of `u64` limbs, least-significant limb first."],["CubicExtParameters",""],["FftField","The interface for fields that are able to be used in FFTs."],["FftParameters","A trait that defines parameters for a field that can be used for FFTs."],["Field","The interface for a generic field."],["Fp12Parameters",""],["Fp256Parameters",""],["Fp2Parameters",""],["Fp320Parameters",""],["Fp384Parameters",""],["Fp3Parameters",""],["Fp448Parameters",""],["Fp4Parameters",""],["Fp64Parameters",""],["Fp6Parameters",""],["Fp768Parameters",""],["Fp832Parameters",""],["FpParameters","A trait that defines parameters for a prime field."],["FromBytes",""],["One","Defines a multiplicative identity element for `Self`."],["PrimeField","The interface for a prime field."],["QuadExtParameters","Defines a Quadratic extension field from a quadratic non-residue."],["SquareRootField","The interface for a field that supports an efficient square-root operation."],["ToBytes",""],["ToConstraintField","Types that can be converted to a vector of `F` elements. Useful for specifying how public inputs to a constraint system should be represented inside that constraint system."],["UniformRand",""],["Zero","Defines an additive identity element for `Self`."]],"type":[["Fp12",""],["Fp2",""],["Fp3",""],["Fp4",""],["Fp6",""]]};