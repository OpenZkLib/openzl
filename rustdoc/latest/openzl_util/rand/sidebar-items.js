window.SIDEBAR_ITEMS = {"macro":[["impl_sample_from_u32","Generates [`Sample`] implementation for `$type` using conversion from `u32`."]],"mod":[["block","The `BlockRngCore` trait and implementation helpers"],["fuzz","Fuzzing module"],["rand_core","Random number generation traits"]],"struct":[["ChaCha12Core","ChaCha with 12 rounds"],["ChaCha12Rng","A cryptographically secure random number generator that uses the ChaCha algorithm."],["ChaCha20Core","ChaCha with 20 rounds"],["ChaCha20Rng","A cryptographically secure random number generator that uses the ChaCha algorithm."],["ChaCha8Core","ChaCha with 8 rounds"],["ChaCha8Rng","A cryptographically secure random number generator that uses the ChaCha algorithm."],["DistIter","Distribution Iterator"],["Error","Error type of random number generators"],["OsRng","A random number generator that retrieves randomness from the operating system."],["Sampled","Distribution Sampled Value"],["SeedIntoRng","Seed Into Random Number Generator"],["SizedRng","Random Number Generator Sized Wrapper"]],"trait":[["CryptoRng","A marker trait used to indicate that an [`RngCore`] or `BlockRngCore` implementation is supposed to be cryptographically secure."],["Distribution","Types (distributions) that can be used to create a random instance of `T`."],["FromEntropy","Entropy Seedable PRNG"],["Rand","Random Number Generator"],["RngCore","The core of a random number generator."],["Sample","Sampling Trait"],["SampleRange","Range that supports generating a single sample efficiently."],["SampleUniform","Helper trait for creating objects using the correct implementation of [`UniformSampler`] for the sampling type."],["SeedableRng","A random number generator that can be explicitly seeded."],["TrySample","Fallible Sampling Trait"]],"type":[["ChaChaCore","ChaCha with 20 rounds, low-level interface"],["ChaChaRng","ChaCha with 20 rounds"]]};