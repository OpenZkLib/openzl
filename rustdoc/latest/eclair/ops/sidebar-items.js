window.SIDEBAR_ITEMS = {"macro":[["binary_op","Defines a binary operation for compilers based on those defined in [`core::ops`]."],["binary_op_assign","Defines the assignment variant of a binary operation for compilers based on those defined in [`core::ops`]."],["unary_op","Defines a unary operation for compilers based on those defined in [`core::ops`]."]],"trait":[["Add","Addition with the `+` Operator"],["AddAssign","Assigned  Addition with the `+=` Operator"],["BitAnd","Bitwise AND with the `&` Operator"],["BitAndAssign","Assigned  Bitwise AND with the `&=` Operator"],["BitOr","Bitwise OR with the `|` Operator"],["BitOrAssign","Assigned  Bitwise OR with the `|=` Operator"],["BitXor","Bitwise XOR with the `^` Operator"],["BitXorAssign","Assigned  Bitwise XOR with the `^=` Operator"],["Div","Division with the `/` Operator"],["DivAssign","Assigned  Division with the `/=` Operator"],["HasAdd","Compiler Reflection for  Addition with the `+` Operator"],["HasAddAssign","Compiler Reflection for Assigning Addition with the `+=` Operator"],["HasBitAnd","Compiler Reflection for  Bitwise AND with the `&` Operator"],["HasBitAndAssign","Compiler Reflection for Assigning Bitwise AND with the `&=` Operator"],["HasBitOr","Compiler Reflection for  Bitwise OR with the `|` Operator"],["HasBitOrAssign","Compiler Reflection for Assigning Bitwise OR with the `|=` Operator"],["HasBitXor","Compiler Reflection for  Bitwise XOR with the `^` Operator"],["HasBitXorAssign","Compiler Reflection for Assigning Bitwise XOR with the `^=` Operator"],["HasDiv","Compiler Reflection for  Division with the `/` Operator"],["HasDivAssign","Compiler Reflection for Assigning Division with the `/=` Operator"],["HasMul","Compiler Reflection for  Multiplication with the `*` Operator"],["HasMulAssign","Compiler Reflection for Assigning Multiplication with the `*=` Operator"],["HasNeg","Compiler Reflection for  Negation with the `-` Operator"],["HasNot","Compiler Reflection for  Negation with the `!` Operator"],["HasRem","Compiler Reflection for  Remainder with the `%` Operator"],["HasRemAssign","Compiler Reflection for Assigning Remainder with the `%=` Operator"],["HasShl","Compiler Reflection for  Left Shift with the `<<` Operator"],["HasShlAssign","Compiler Reflection for Assigning Left Shift with the `<<=` Operator"],["HasShr","Compiler Reflection for  Right Shift with the `>>` Operator"],["HasShrAssign","Compiler Reflection for Assigning Right Shift with the `>>=` Operator"],["HasSub","Compiler Reflection for  Subtraction with the `-` Operator"],["HasSubAssign","Compiler Reflection for Assigning Subtraction with the `-=` Operator"],["Mul","Multiplication with the `*` Operator"],["MulAssign","Assigned  Multiplication with the `*=` Operator"],["Neg","Negation with the `-` Operator"],["Not","Negation with the `!` Operator"],["Rem","Remainder with the `%` Operator"],["RemAssign","Assigned  Remainder with the `%=` Operator"],["Shl","Left Shift with the `<<` Operator"],["ShlAssign","Assigned  Left Shift with the `<<=` Operator"],["Shr","Right Shift with the `>>` Operator"],["ShrAssign","Assigned  Right Shift with the `>>=` Operator"],["Sub","Subtraction with the `-` Operator"],["SubAssign","Assigned  Subtraction with the `-=` Operator"]]};